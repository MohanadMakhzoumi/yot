// ignore_for_file: use_build_context_synchronously, unused_local_variable

import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:provider/provider.dart';

import '../adminloginpage.dart';
import '../branchpage.dart';
import '../main.dart';
import '../views/screens/home_screen.dart';

Future<void> addUserToFirestore(String username, String useremail,
    String userphone, String userpassword, BuildContext context) async {
  try {
    // Create a new user with email and password
    UserCredential userCredential = await FirebaseAuth.instance
        .createUserWithEmailAndPassword(
            email: useremail, password: userpassword);

    // Get the unique user ID generated by Firebase
    String userid = userCredential.user!.uid;

    // Create a Firestore instance
    FirebaseFirestore firestore = FirebaseFirestore.instance;

    // Check if the email is already registered
    QuerySnapshot querySnapshot = await firestore
        .collection('User')
        .where('useremail', isEqualTo: useremail)
        .get();

    if (querySnapshot.docs.isNotEmpty) {
      // Email already exists, show an alert dialog
      showDialog(
        context: context,
        builder: (BuildContext context) {
          return AlertDialog(
            title: const Text('Email is already registered'),
            content: const Text('Please use a different email.'),
            actions: [
              TextButton(
                child: const Text('OK'),
                onPressed: () => Navigator.pop(context),
              ),
            ],
          );
        },
      );
    } else {
      // Email doesn't exist, proceed with adding the user
      await firestore.collection('User').doc(userid).set({
        'userid': userid,
        'username': username,
        'useremail': useremail,
        'userphone': userphone,
        'userpassword': userpassword,
      });

      // User added successfully, show a success message or perform other actions
      print('User registered successfully!');
    }
  } catch (e) {
    // Error occurred while adding the user, handle the error
    print('Error adding user: $e');
  }
}

Future<void> loginUser(
  String useremail,
  String userpassword,
  BuildContext context,
) async {
  try {
    // Sign in the user with email and password
    UserCredential userCredential =
        await FirebaseAuth.instance.signInWithEmailAndPassword(
      email: useremail,
      password: userpassword,
    );

    // Get the current user and user ID
    User? currentUser = FirebaseAuth.instance.currentUser;
    String userId = currentUser!.uid;

    // Set the user ID in a provider or store it in any desired way
    UserData userData = Provider.of<UserData>(context, listen: false);
    userData.setUserId(userId);

    // Your login logic here
    print('Login successful!');
    Navigator.pushReplacement(
      context,
      MaterialPageRoute(builder: (context) => HomeScreen(userId: userId)),
    );
  } catch (e) {
    // Error occurred while logging in, handle the error
    if (e is FirebaseAuthException) {
      // Check specific error codes to determine the cause
      if (e.code == 'wrong-password') {
        // Display an alert dialog for wrong password
        showDialog(
          context: context,
          builder: (context) {
            return AlertDialog(
              title: const Text('Login Error'),
              content: const Text('Incorrect password.'),
              actions: [
                TextButton(
                  child: const Text('OK'),
                  onPressed: () => Navigator.pop(context),
                ),
              ],
            );
          },
        );
      } else if (e.code == 'user-not-found') {
        // Display an alert dialog for email not registered
        showDialog(
          context: context,
          builder: (context) {
            return AlertDialog(
              title: const Text('Login Error'),
              content: const Text('Email not registered.'),
              actions: [
                TextButton(
                  child: const Text('OK'),
                  onPressed: () => Navigator.pop(context),
                ),
              ],
            );
          },
        );
      }
    }
    // Handle other error cases
    print('Error logging in: $e');
  }
}
//--------------------------------------------------------

Future<void> SignUpAdmin(String adminname, String adminemail, String adminphone,
    String adminpassword, BuildContext context) async {
  try {
    // Create a new user with email and password
    UserCredential userCredential = await FirebaseAuth.instance
        .createUserWithEmailAndPassword(
            email: adminemail, password: adminpassword);

    // Get the unique user ID generated by Firebase
    String adminid = userCredential.user!.uid;

    // Create a Firestore instance
    FirebaseFirestore firestore = FirebaseFirestore.instance;

    // Check if the email is already registered
    QuerySnapshot querySnapshot = await firestore
        .collection('Admin')
        .where('adminemail', isEqualTo: adminemail)
        .get();

    if (querySnapshot.docs.isNotEmpty) {
      // Email already exists, show an alert dialog
      showDialog(
        context: context,
        builder: (context) {
          return AlertDialog(
            title: const Text('Email is already registered'),
            content: const Text('Please use a different email.'),
            actions: [
              TextButton(
                child: const Text('OK'),
                onPressed: () => Navigator.pop(context),
              ),
            ],
          );
        },
      );
    } else {
      // Email doesn't exist, proceed with adding the user
      await firestore.collection('Admin').doc(adminid).set({
        'adminid': adminid,
        'adminname': adminname,
        'adminemail': adminemail,
        'adminphone': adminphone,
        'adminpassword': adminpassword,
      });
      AdminData adminData = Provider.of<AdminData>(context, listen: false);
      adminData.setAdminId(adminid);
      // User added successfully, show a success message or perform other actions
      print('User registered successfully!');
      Navigator.pushReplacement(
          context,
          MaterialPageRoute(
            builder: (context) => MultiProvider(
                providers: [
                  ChangeNotifierProvider<UserData>(create: (_) => UserData()),
                  ChangeNotifierProvider<AdminData>(create: (_) => AdminData()),
                ],
                child: AdminLogInPage(
                  adminId: adminid,
                )),
          ));
    }
  } catch (e) {
    // Error occurred while adding the user, handle the error
    print('Error adding user: $e');
  }
}

Future<void> loginAdmin(
  String useremail,
  String userpassword,
  BuildContext context,
) async {
  try {
    // Sign in the user with email and password
    UserCredential currentAdmin =
        await FirebaseAuth.instance.signInWithEmailAndPassword(
      email: useremail,
      password: userpassword,
    );

    User? currentUser = FirebaseAuth.instance.currentUser;
    String adminid = currentUser!.uid;

    AdminData adminData = Provider.of<AdminData>(context, listen: false);
    adminData.setAdminId(adminid);

    // Your login logic here
    print('Login successful!');
    Navigator.pushReplacement(
      context,
      MaterialPageRoute(
        builder: (context) => MultiProvider(
          providers: [
            ChangeNotifierProvider<UserData>(create: (_) => UserData()),
            ChangeNotifierProvider<AdminData>(create: (_) => AdminData()),
          ],
          child: AdminBranchPage(
            adminId: adminid,
          ),
        ),
      ),
    );
  } catch (e) {
    // Error occurred while logging in, handle the error
    if (e is FirebaseAuthException) {
      // Check specific error codes to determine the cause
      if (e.code == 'wrong-password') {
        // Display an alert dialog for wrong password
        showDialog(
          context: context,
          builder: (BuildContext context) {
            return AlertDialog(
              title: const Text('Login Error'),
              content: const Text('Incorrect password.'),
              actions: [
                TextButton(
                  child: const Text('OK'),
                  onPressed: () => Navigator.pop(context),
                ),
              ],
            );
          },
        );
      } else if (e.code == 'user-not-found') {
        // Display an alert dialog for email not registered
        showDialog(
          context: context,
          builder: (BuildContext context) {
            return AlertDialog(
              title: const Text('Login Error'),
              content: const Text('Email not registered.'),
              actions: [
                TextButton(
                  child: const Text('OK'),
                  onPressed: () => Navigator.pop(context),
                ),
              ],
            );
          },
        );
      }
    }
    // Handle other error cases
    print('Error logging in: $e');
  }
}

// Log out the user
void signOutUser(BuildContext context) async {
// Inside your logout button onPressed event handler
  showDialog(
    context: context,
    builder: (BuildContext context) => AlertDialog(
      title: const Text('Logout'),
      content: const Text('Are you sure you want to logout?'),
      actions: [
        TextButton(
          onPressed: () {
            Navigator.of(context).pop(); // Close the dialog
          },
          child: const Text(
            'No',
            style: TextStyle(color: Color.fromARGB(255, 0, 0, 0)),
          ),
        ),
        TextButton(
          onPressed: () {
            // Perform logout operation here
            // For example, clear user session, navigate to login screen, etc.
            Navigator.push(
                context, MaterialPageRoute(builder: (context) => MyApp()));
            // Close the dialog
          },
          child: const Text(
            'Yes',
            style: TextStyle(color: Color.fromARGB(255, 0, 0, 0)),
          ),
        ),
      ],
    ),
  );

  await FirebaseAuth.instance.signOut();
}
